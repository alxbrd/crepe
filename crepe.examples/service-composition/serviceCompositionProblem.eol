/**
	An example of using Crepe to solve the Multi-Objective Service Composition Problem.

	Input models:
		INPUT	: The concrete instance of the NRP	
		MOD		: Placeholder for the solution (metamodel uri = "NextReleaseProblem"
		MM		: NextReleaseProblemSolution
		FIN		: Placeholder for finitisation model, which is auto-generated.
		CONF	: Configuration file
		SEARCH	: The search model
*/
import "../../crepe.core/util/util.eol";
import "../../crepe.core/util/finitisationModelCreationUtil.eol";
import '../../crepe.core/search/algs/nsgaii.eol';

// Required utility variables
var t = 0;
var run = 1;
var totalRuns = 1;
var random = setupRandomSeed();
var unassignedReferences;
var modelObjects;
var instantiableClasses;
var objectSegmentMap;
var featureFeaturePairMap;
var fitFunctionIsEol = true;
var featureCollection;
var maxAllele = 100;  

// Configure the amount of debug information you want to see
var DEBUG = Sequence{"LOG"}; // Choices: LOG, WARN, DEBUG

// Execute the algorithm multiple times for statistical purposes
for (i in Sequence{1..totalRuns}) {
	run.println("Experiment Run: ");
	// Now go
	commence();
	run = run + 1; // Increase experiment iteration 
	t = 0; // Reset the algorithm
}

/**
	@param candidate - a RequirementSelection object
*/
operation doEvaluateFitness(candidate:MM!EObject) : Sequence {	
	// Little trick needed to make the candidate conform to the Queens MM
	MOD.getResource.getContents().clear();
	MOD.getResource.getContents().add(candidate);	

	candidate.prettyPrint();

	//for (plan in MOD!ConcretePlan.all) {
	//	"Plan = ".println();
	//	for (orchestrator in MOD!Orchestrator.all) {
	//		orchestrator.println();	
	//		var node := MOD!Node;
	//		node = orchestrator.deployedOn;
	//		node.println();
	//		node.ID.asInteger().println();
	//		node.ID.println("Orchestrator: ");
	//	}
	//}
 	//
	
	//var candidatePhenotype = candidate.toPhenotype();
	//candidatePhenotype.println();
	// Pretty print
	//candidatePhenotype.prettyPrint();
	
	
	// Maximise
	var score = 1;
	
	// Minimise
	var cost = 2;
	
	// Create objectives (TODO: We can make a utility method for this)
	var o1 = new SEARCH!Objective;
	o1.minimise = false;
	o1.score = score.asDouble();
	
	var o2 = new SEARCH!Objective;
	o2.minimise = true;
	o2.score = cost.asDouble();
	
	return Sequence{o1, o2};
}

operation MOD!CompositeApplication prettyPrint() {
	"Solution Plan:".println();
	var plan = MOD!ConcretePlan.all.first();
		
	for (orchestrator in plan.orchestrators) {
		("Orchestrator: " + orchestrator.deployedOn.ID).println();
		orchestrator.abstractServices.size().println("Abstract: ");
		orchestrator.concreteServices.size().println("Concrete: ");
		 
		for (service in orchestrator.concreteServices) {
			("    Concrete Services: " + service.providedBy.ID).println();
		}
	}
}